PYTHON PROGRAMMING INTRODUCTION
Python is a high level ,interpreted and general purpose programming language
-> Is designed to be easy to read and write and powerful enough to build several things in different 
domains - can build amost anythings

WHY PYTHON?
1.Simple and readable syntax
**syntax is the set of rules that define how code is wriitten in a programming language**

2.Less code ,more power - what might take language like Java or C++ or C 10 lines to do , Python might do the 
same in 2 lines

3.Interpreted Language - doesn't need to compile - Python code just runs by running Python files directly
    **Interpreted languages** - executed by the interpreter by reading line by line ...Python
    **Compiled languages** - ...Java ,C, C#, C++ , Rust, Go
        -> you write a program
        -> compile the program 
        -> compiler checks for errors
        -> if no errors , it creates an executable file
        -> Machine executes and gives back output

4.Massive community & libraries
5.Cross platform - can run on any OS -> Windows , MacOS ,Linux and mobile systems

PYTHON APPLICATIONS
1.Web Development
2.Data Science & Machine Learning
3.Cybersecurity
4.Game development
5.Robotics

CREATING A PYTHON FILE
-To create a python file use .py extension
main.py
index.py
regsiter.py
number.py


VARIBLES
-> A variable a memory space / container used to hold values /data
-> Think of it like  box used to store something
->Simplest way to store data in programming

x = 10
x ---> variable
10 --> value

name = "Brian"
name ---> variable
"Brian" -> value

N/B:- Variables can have any name of your choice but have to follow variable naming rules

VARIABLE NAMING RULES
1.Variable names can only contain letters,numbers and underscores
 **Valid variable names**
    -> name , number, x , y , email, phone, full_name1, number1
**Invalid variable names**
    -> name@ ,#number , full/name, name() ,'name'

2.Variable names can only start with letters or underscores -cant start with numbers
**valid names**
    -> name1 , name2 , _full_name_ , _full_name1
**Invalid names**
    -> 1name, 23email,

3.Variable names cant have spaces
**Invalid names**
    -> full name , phone number
**Valid names**
    -> full_name , fullname
    -> phone_number , phonenumber

4.Variable names are case sensitive
 -> name , NAME, Name , NAMe -> not equal
 -> x & X -> 2 different variables
 x = 10
 X = 10

5.Variable names cant be Python keywords - cant use reserved words

N/B:- It is good practice to give variables meaningful names
-> name = "Jane"
    x = "Jane"
    email = "john@mail.com"

Outputting values ->print() - function used to output / display values


DATA TYPES
-A data type tells Python what kind of value something is and what operations can be done on it
-Every variaable has a type depending on the value it holds
**Python Data Types**
1.NUMERICAL DATA TYPES
-Data that holds numerical values
-Categorized into two:
    a) Integer - numerical values representing whole numbers 
        e.g 20,30,12,44,5000000
        -denoted as int
    b) Float - numerical values representing decimal or floating point numbers
        e.g 12.4777, 1.3, 78.0122
        -denoted as float 

2.TEXTUAL DATA TYPES
- Text based data
- String - sequence of characters  -letters, numbers, symbols ,spaces etc enclosed in quotes (single or double)
- denoted as str 
- enables Python to work with text
e.g 
   name = "John Doe"
   name = 'John Doe'
   message = 'Hello World!!!'
   sentence = "This is the 2nd programming class at 6:30pm(EAT)"
   number = "100"




3.BOOLEAN DATA TYPES
-Data types used to represent truth values
-True or False
-denoted as bool
is_adult = False


int - numerical whole numbers
float - numerical decimal numbers
str - charcters enclosed in quotes
bool - truth values


CHECKING FOR DATA TYPES
-We identify the type of data a value is in Python using type() function
-Returns data type 

**yellow** -undefined error 
**red** - syntax or functional error

Indentation - tabs or spaces at the beginning of a line
print() - output values in the terminal
type() - determine the data type
input() - take user input from the terminal


TAKING USER INPUT
-Allowing the user to interact with the program by allowing the program to get data from the user
-In Python we take user input using input()
-N/B:- Any and all data coming from user input will always be a 

**Comments , Multiline strings, Type casting**